// Generated by gencpp from file gsdf_msgs/CommPacket.msg
// DO NOT EDIT!


#ifndef GSDF_MSGS_MESSAGE_COMMPACKET_H
#define GSDF_MSGS_MESSAGE_COMMPACKET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gsdf_msgs/CommHeader.h>
#include <gsdf_msgs/CommContent.h>

namespace gsdf_msgs
{
template <class ContainerAllocator>
struct CommPacket_
{
  typedef CommPacket_<ContainerAllocator> Type;

  CommPacket_()
    : header()
    , content()  {
    }
  CommPacket_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , content(_alloc)  {
  (void)_alloc;
    }



   typedef  ::gsdf_msgs::CommHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::gsdf_msgs::CommContent_<ContainerAllocator>  _content_type;
  _content_type content;





  typedef boost::shared_ptr< ::gsdf_msgs::CommPacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gsdf_msgs::CommPacket_<ContainerAllocator> const> ConstPtr;

}; // struct CommPacket_

typedef ::gsdf_msgs::CommPacket_<std::allocator<void> > CommPacket;

typedef boost::shared_ptr< ::gsdf_msgs::CommPacket > CommPacketPtr;
typedef boost::shared_ptr< ::gsdf_msgs::CommPacket const> CommPacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gsdf_msgs::CommPacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gsdf_msgs::CommPacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gsdf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'gsdf_msgs': ['/home/plankton/DDP/src/micros_swarm_framework/core/gsdf_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gsdf_msgs::CommPacket_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gsdf_msgs::CommPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gsdf_msgs::CommPacket_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46d64b663b4515e9459bdd4c8023f462";
  }

  static const char* value(const ::gsdf_msgs::CommPacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46d64b663b4515e9ULL;
  static const uint64_t static_value2 = 0x459bdd4c8023f462ULL;
};

template<class ContainerAllocator>
struct DataType< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gsdf_msgs/CommPacket";
  }

  static const char* value(const ::gsdf_msgs::CommPacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CommHeader header\n\
CommContent content\n\
\n\
================================================================================\n\
MSG: gsdf_msgs/CommHeader\n\
int16 source\n\
int8 type\n\
int16 data_len\n\
int8 version\n\
int16 checksum\n\
\n\
================================================================================\n\
MSG: gsdf_msgs/CommContent\n\
uint8[] buf\n\
";
  }

  static const char* value(const ::gsdf_msgs::CommPacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.content);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommPacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gsdf_msgs::CommPacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gsdf_msgs::CommPacket_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::gsdf_msgs::CommHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "content: ";
    s << std::endl;
    Printer< ::gsdf_msgs::CommContent_<ContainerAllocator> >::stream(s, indent + "  ", v.content);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GSDF_MSGS_MESSAGE_COMMPACKET_H
