# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gsdf_msgs/CommPacket.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gsdf_msgs.msg

class CommPacket(genpy.Message):
  _md5sum = "46d64b663b4515e9459bdd4c8023f462"
  _type = "gsdf_msgs/CommPacket"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """CommHeader header
CommContent content

================================================================================
MSG: gsdf_msgs/CommHeader
int16 source
int8 type
int16 data_len
int8 version
int16 checksum

================================================================================
MSG: gsdf_msgs/CommContent
uint8[] buf
"""
  __slots__ = ['header','content']
  _slot_types = ['gsdf_msgs/CommHeader','gsdf_msgs/CommContent']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,content

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CommPacket, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = gsdf_msgs.msg.CommHeader()
      if self.content is None:
        self.content = gsdf_msgs.msg.CommContent()
    else:
      self.header = gsdf_msgs.msg.CommHeader()
      self.content = gsdf_msgs.msg.CommContent()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_hbhbh().pack(_x.header.source, _x.header.type, _x.header.data_len, _x.header.version, _x.header.checksum))
      _x = self.content.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = gsdf_msgs.msg.CommHeader()
      if self.content is None:
        self.content = gsdf_msgs.msg.CommContent()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.header.source, _x.header.type, _x.header.data_len, _x.header.version, _x.header.checksum,) = _get_struct_hbhbh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.content.buf = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_hbhbh().pack(_x.header.source, _x.header.type, _x.header.data_len, _x.header.version, _x.header.checksum))
      _x = self.content.buf
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = gsdf_msgs.msg.CommHeader()
      if self.content is None:
        self.content = gsdf_msgs.msg.CommContent()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.header.source, _x.header.type, _x.header.data_len, _x.header.version, _x.header.checksum,) = _get_struct_hbhbh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.content.buf = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_hbhbh = None
def _get_struct_hbhbh():
    global _struct_hbhbh
    if _struct_hbhbh is None:
        _struct_hbhbh = struct.Struct("<hbhbh")
    return _struct_hbhbh
