;; Auto-generated. Do not edit!


(when (boundp 'nav2d_navigator::ExploreResult)
  (if (not (find-package "NAV2D_NAVIGATOR"))
    (make-package "NAV2D_NAVIGATOR"))
  (shadow 'ExploreResult (find-package "NAV2D_NAVIGATOR")))
(unless (find-package "NAV2D_NAVIGATOR::EXPLORERESULT")
  (make-package "NAV2D_NAVIGATOR::EXPLORERESULT"))

(in-package "ROS")
;;//! \htmlinclude ExploreResult.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass nav2d_navigator::ExploreResult
  :super ros::object
  :slots (_final_pose ))

(defmethod nav2d_navigator::ExploreResult
  (:init
   (&key
    ((:final_pose __final_pose) (instance geometry_msgs::Pose2D :init))
    )
   (send-super :init)
   (setq _final_pose __final_pose)
   self)
  (:final_pose
   (&rest __final_pose)
   (if (keywordp (car __final_pose))
       (send* _final_pose __final_pose)
     (progn
       (if __final_pose (setq _final_pose (car __final_pose)))
       _final_pose)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose2D _final_pose
    (send _final_pose :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose2D _final_pose
       (send _final_pose :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose2D _final_pose
     (send _final_pose :deserialize buf ptr-) (incf ptr- (send _final_pose :serialization-length))
   ;;
   self)
  )

(setf (get nav2d_navigator::ExploreResult :md5sum-) "9b03b05e2f5c62e96e4cec4715bf432f")
(setf (get nav2d_navigator::ExploreResult :datatype-) "nav2d_navigator/ExploreResult")
(setf (get nav2d_navigator::ExploreResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/Pose2D final_pose

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

")



(provide :nav2d_navigator/ExploreResult "9b03b05e2f5c62e96e4cec4715bf432f")


